AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "API for the energy tariffs calculator"

Parameters:
  DomainName:
    Type: String
    Description: The base domain name for hosting the API

Globals:
  Function:
    AutoPublishAlias: live

Resources:
  # API Domain and DNS
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: DNS zone for the energy API
      Name: !Ref DomainName

  ApiGwCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          ValidationDomain: !Ref DomainName
      CertificateTransparencyLoggingPreference: "ENABLED"
      ValidationMethod: DNS

  ApiGwDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainName
      RegionalCertificateArn: !Ref ApiGwCertificate
      SecurityPolicy: "TLS_1_2"
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGwDomainMapping:
    DependsOn:
      - LambdaEnergyTariff
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      DomainName: !Ref ApiGwDomain
      RestApiId: !Ref ApiGw
      Stage: "v1"
      BasePath: "v1"

  ApiDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt ApiGwDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiGwDomain.RegionalHostedZoneId
      HostedZoneId: !Ref HostedZone
      Name: !Ref DomainName
      Type: A

  # API
  ApiGw:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-energy"
      StageName: v1
      OpenApiVersion: "2.0"
      EndpointConfiguration:
        Type: REGIONAL

  # Energy Tariff Lambda
  LambdaEnergyTariffRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  LambdaEnergyTariffPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: logs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: !GetAtt LambdaEnergyTariffLogs.Arn
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:BatchGetItem
              - dynamodb:Query
            Resource:
              - !GetAtt IndexingSettingsTable.Arn
      Roles:
        - !Ref LambdaEnergyTariffRole

  LambdaEnergyTariff:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Lambda that implements the energy tariff calculations"
      Handler: "lambda_api.handler"
      CodeUri: app/energy_tariffs
      Runtime: python3.9
      Timeout: 60
      MemorySize: 128
      Role: !GetAtt LambdaEnergyTariffRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref IndexingSettingsTable
          API_BASE_PATH: "/v1"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref ApiGw

  LambdaEnergyTariffLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaEnergyTariff}"
      RetentionInDays: 7

  # Datastore
  IndexingSettingsTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: "primary"
          AttributeType: "S"
        - AttributeName: "secondary"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "primary"
          KeyType: "HASH"
        - AttributeName: "secondary"
          KeyType: "RANGE"
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true

  # Engie Feeder
  LambdaEngieFeederRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  LambdaEngieFeederPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: logs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: !GetAtt LambdaEngieFeederLogs.Arn
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:BatchGetItem
              - dynamodb:PutItem
              - dynamodb:BatchWriteItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:ConditionCheckItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - !GetAtt IndexingSettingsTable.Arn
      Roles:
        - !Ref LambdaEngieFeederRole

  LambdaEngieFeeder:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Lambda that feeds engie indexes"
      Handler: "lambda_engie.handler"
      CodeUri: app/energy_tariffs
      Runtime: python3.9
      Timeout: 60
      MemorySize: 128
      Role: !GetAtt LambdaEngieFeederRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref IndexingSettingsTable
      Events:
        ScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: "rate(12 hours)"

  LambdaEngieFeederLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaEngieFeeder}"
      RetentionInDays: 7

  # EEX Feeder
  LambdaEEXFeederRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  LambdaEEXFeederPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: logs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: !GetAtt LambdaEEXFeederLogs.Arn
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:BatchGetItem
              - dynamodb:PutItem
              - dynamodb:BatchWriteItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:ConditionCheckItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - !GetAtt IndexingSettingsTable.Arn
      Roles:
        - !Ref LambdaEEXFeederRole

  LambdaEEXFeeder:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Lambda that feeds EEX indexes"
      Handler: "lambda_eex.handler"
      CodeUri: app/energy_tariffs
      Runtime: python3.9
      Timeout: 60
      MemorySize: 128
      Role: !GetAtt LambdaEEXFeederRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref IndexingSettingsTable
      Events:
        ScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: "rate(1 day)"

  LambdaEEXFeederLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaEEXFeeder}"
      RetentionInDays: 7

  # ENTSO-E Feeder
  LambdaEntsoeFeederRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  LambdaEntsoeFeederPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: logs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: !GetAtt LambdaEntsoeFeederLogs.Arn
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:BatchGetItem
              - dynamodb:PutItem
              - dynamodb:BatchWriteItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:ConditionCheckItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - !GetAtt IndexingSettingsTable.Arn
      Roles:
        - !Ref LambdaEntsoeFeederRole

  LambdaEntsoeFeeder:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Lambda that feeds ENTSO-E indexes"
      Handler: "lambda_entsoe.handler"
      CodeUri: app/energy_tariffs
      Runtime: python3.9
      Timeout: 60
      MemorySize: 128
      Role: !GetAtt LambdaEntsoeFeederRole.Arn
      Layers:
        - arn:aws:lambda:eu-west-1:336392948345:layer:AWSSDKPandas-Python39:6
      Environment:
        Variables:
          TABLE_NAME: !Ref IndexingSettingsTable
      Events:
        ScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: "rate(12 hours)"

  LambdaEntsoeFeederLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaEntsoeFeeder}"
      RetentionInDays: 7
